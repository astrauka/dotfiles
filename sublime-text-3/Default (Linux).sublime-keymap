[
  { "keys": ["alt+ctrl+n"], "command": "new_file" },
  { "keys": ["alt+w"], "command": "close" },
  { "keys": ["alt+k", "alt+b"], "command": "toggle_side_bar" },

  { "keys": ["alt+]"], "command": "indent" },
  { "keys": ["alt+["], "command": "unindent" },

  { "keys": ["alt+d"], "command": "find_under_expand" },
  { "keys": ["alt+shift+space"], "command": "expand_selection", "args": {"to": "scope"} },
  { "keys": ["alt+shift+m"], "command": "expand_selection", "args": {"to": "brackets"} },
  { "keys": ["alt+m"], "command": "move_to", "args": {"to": "brackets"} },
  { "keys": ["alt+shift+j"], "command": "expand_selection", "args": {"to": "indentation"} },
  { "keys": ["alt+shift+a"], "command": "expand_selection", "args": {"to": "tag"} },

  { "keys": ["super+f"], "command": "show_panel", "args": {"panel": "find", "reverse": false} },
  { "keys": ["super+h"], "command": "show_panel", "args": {"panel": "replace", "reverse": false} },
  { "keys": ["alt+shift+f"], "command": "show_panel", "args": {"panel": "find_in_files"} },

  { "keys": ["super+p"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },
  { "keys": ["super+shift+p"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },
  { "keys": ["super+r"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"} },

  { "keys": ["alt+/"], "command": "toggle_comment", "args": { "block": false } },
  { "keys": ["alt+shift+/"], "command": "toggle_comment", "args": { "block": true } },

  { "keys": ["alt+j"], "command": "join_lines" },
  { "keys": ["alt+shift+d"], "command": "duplicate_line" },

  { "keys": ["f9"], "command": "sort_lines", "args": {"case_sensitive": false} },
  { "keys": ["alt+f9"], "command": "sort_lines", "args": {"case_sensitive": true} },

  { "keys": ["shift+super+1"], "command": "set_layout", "args": { "cells": [[0, 0, 1, 1]], "cols": [0.0, 1.0], "rows": [0.0, 1.0] } },
  { "keys": ["alt+k", "alt+u"], "command": "upper_case" },
  { "keys": ["alt+k", "alt+l"], "command": "lower_case" },

  { "keys": ["alt+shift+["], "command": "fold" },
  { "keys": ["alt+shift+]"], "command": "unfold" },
  { "keys": ["ctrl+="], "command": "increase_font_size" },

  // Find panel key bindings
  { "keys": ["enter"], "command": "find_next", "context":
    [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["shift+enter"], "command": "find_prev", "context":
    [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["super+enter"], "command": "find_all", "args": {"close_panel": true},
     "context": [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]
  },

  // Replace panel key bindings
  { "keys": ["enter"], "command": "find_next", "context":
    [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["shift+enter"], "command": "find_prev", "context":
    [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["super+enter"], "command": "find_all", "args": {"close_panel": true},
    "context": [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["alt+super+enter"], "command": "replace_all", "args": {"close_panel": true},
     "context": [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]
  },

  // Incremental find panel key bindings
  { "keys": ["enter"], "command": "hide_panel", "context":
    [{"key": "panel", "operand": "incremental_find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["shift+enter"], "command": "find_prev", "context":
    [{"key": "panel", "operand": "incremental_find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["super+enter"], "command": "find_all", "args": {"close_panel": true},
    "context": [{"key": "panel", "operand": "incremental_find"}, {"key": "panel_has_focus"}]
  },

  // Normal
  { "keys": ["alt+b"], "command": "build" },
  { "keys": ["alt+'"], "command": "change_quotes" },
  { "keys": ["super+s"], "command": "save" },
  { "keys": ["alt+w"], "command": "close" },
  { "keys": ["ctrl+d"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },

  { "keys": ["enter"], "command": "next_result", "context": [
    {"key": "selector", "operator": "equal", "operand": "text.find-in-files" }]},
  { "keys": ["ctrl+super+up"], "command": "scroll_lines", "args": {"amount": 5.0} },
  { "keys": ["ctrl+super+down"], "command": "scroll_lines", "args": {"amount": -5.0} },
  { "keys": ["super+o"], "command": "goto_definition" },

  { "keys": ["ctrl+v"], "command": "unbound" },
  { "keys": ["ctrl+w"], "command": "focus_neighboring_group" },
  { "keys": ["ctrl+shift+j"], "command": "select_lines", "args": {"forward": true} },
  { "keys": ["ctrl+shift+k"], "command": "select_lines", "args": {"forward": false} },
  { "keys": ["ctrl+p, ctrl+c"], "command": "copy_path"},
  { "keys": ["ctrl+p, ctrl+p"], "command": "copy_filepath_with_line_numbers"},
  { "keys": ["alt+ctrl+m"], "command": "back_to_definition"},
  { "keys": ["super+space"], "command": "auto_complete" },

  // CTags bindings
  { "command": "navigate_to_definition", "keys": ["alt+o"] },

  // FileBrowser
  {
    "keys": ["ctrl+o"],
    "command": "dired",
    "args": {
      "immediate": true,
      "single_pane": true,
      "other_group": "left",
      "project": true
    }
  },

  // Markdown Preview
  {
    "keys": ["ctrl+m"],
    "command": "markdown_preview",
    "args": {
      "target": "browser",
      "parser": "github"
    }
  },

  // Keybindings
  { "keys": ["ctrl+?"], "command": "cheat_sheet" },
  { "keys": ["ctrl+/"], "command": "find_keymap" },

  // Github Tools
  { "keys": ["ctrl+g", "g"], "command": "public_gist_from_selection" },
  { "keys": ["ctrl+g", "p"], "command": "private_gist_from_selection" },
  { "keys": ["ctrl+g", "o"], "command": "open_gist_in_editor" },
  { "keys": ["ctrl+g", "w"], "command": "open_gist_in_browser" },
  { "keys": ["ctrl+g", "v"], "command": "open_remote_url" },
  { "keys": ["ctrl+g", "c"], "command": "copy_remote_url" },
  { "keys": ["ctrl+g", "b"], "command": "blame" },
  { "keys": ["ctrl+g", "h"], "command": "history" },

  // Shell commands
  { "keys": ["ctrl+s", "c"], "command": "shell_command" },
  {
    "keys": ["c"],
    "command": "shell_command_refresh",
    "command_prefix": "source $HOME/.bashrc",
    "context": [{ "key": "setting.ShellCommand" }]
  },
  {
    "keys": ["ctrl+s", "r"],
    "command": "shell_command",
    "args": {
      "command_prefix": "source $HOME/.bashrc && rvm-auto-ruby -S",
      "prompt": "Shell Command"
    }
  },
  { // Process list
    "keys": ["ctrl+s", "p"],
    "command": "shell_command",
    "args": {
      "command": "ps xcro user,pid,%cpu,cputime,%mem,command | head -n 28",
    }
  },
  { // mysql process list
    "keys": ["ctrl+s", "s"],
    "command": "shell_command",
    "args": {
      "command": "ps aux | grep mysql",
    }
  },
  { // Send SIGKILL to a process number selected
    // in a Shell Command Window
    "keys": ["K"],
    "command": "shell_command",
    "args": {
      "command": "kill -9",
      "region": "arg"
    },
    "context": [{ "key": "setting.ShellCommand" }]
  },

  // SublimeREPL bindings:
  // =====================
  { "keys": ["alt+enter"], "command": "repl_transfer_current", "args": {"scope": "block"}},
  { "keys": ["alt+shift+enter"], "command": "repl_transfer_current", "args": {"scope": "selection"}},
  { "keys": ["super+alt+r"], "command": "refresh_namespaces_in_repl"},
  { "keys": ["super+alt+i"], "command": "switch_to_current_namespace_in_repl"},
  { "keys": ["super+alt+x"], "command": "run_clojure_tests_from_current_namespace_in_repl"},
  { "keys": ["super+alt+a"], "command": "run_all_clojure_tests_from_project_in_repl"},

  // Start a new clojure repl. Leaves existing open. Note that SublimeREPL doesn't handle multiple
  // REPLs very well. They will work but it's not clear which repl will receive commands sent from
  // another clojure editor.
  { "keys": ["super+alt+l"],
    "command": "run_existing_window_command",
    "args":{"id": "repl_clojure",
            "file": "config/Clojure/Main.sublime-menu"}},

  // BracketHighlighter bindings:
  // ===========================
  // Swap bracket type
  { "keys": ["ctrl+shift+]"], "command": "swap_brackets"},
  // Swap quotes (only goes boths ways in supported languages...)
  { "keys": ["ctrl+shift+'"], "command": "bh_key", "args": {"lines" : true, "plugin": {"type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"], "command": "bh_modules.swapquotes"} }},
  // Select text between brackets
  { "keys": ["ctrl+super+a"], "command": "bh_key", "args": {"lines" : true, "plugin": {"type": ["__all__"], "command": "bh_modules.bracketselect"} } },
  // Select tag name of HTML/XML tag (both opening name and closing)
  { "keys": ["ctrl+super+t"], "command": "bh_key", "args": {"plugin": {"type": ["cfml", "html", "angle"], "command": "bh_modules.tagnameselect"} } },
  // Toggle high visibility mode
  { "keys": ["super+alt+="], "command": "bh_toggle_high_visibility"},

  // Common
  // ===========================
  { "keys": ["ctrl+x"], "command": "cut" },
  { "keys": ["ctrl+c"], "command": "copy" },
  { "keys": ["ctrl+v"], "command": "paste" },

  // SublimeRSpec
  // ===========================
  // test current line
  {
    "keys": ["alt+shift+r"],
    "command": "test_current_line",
    "context": [
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.ruby, source.rspec"
      }
    ]
  },
  // test current file
  {
    "keys": ["alt+shift+t"],
    "command": "test_current_file",
    "context": [
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.ruby, source.rspec"
      }
    ]
  },
  // run last spec
  { "keys": ["alt+shift+e"], "command": "run_last_spec" },
  // display output panel
  { "keys": ["alt+shift+x"], "command": "display_output_panel" },
  // switch between code and test
  {
    "keys": ["alt+period"],
    "command": "switch_between_code_and_test",
    "context": [
      {
        "key": "selector", "operator": "equal",
        "operand": "source.ruby, source.rspec"
      }
    ]
  },
  // create spec file
  { "keys": ["alt+shift+c"], "command": "create_spec_file" },

  // Github
  // ===========================
  { "keys": ["alt+shift+g"], "command": "git_blame" },
]
